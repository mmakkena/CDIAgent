import os
import time
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# Import the necessary functions from the CDI RAG system file
# NOTE: Ensure cdi_rag_system.py is in the same directory.
from cdi_rag_system import get_llm_pipeline, setup_chroma_db, create_rag_chain, SYSTEM_PROMPT

# --- 1. FastAPI and State Initialization ---
app = FastAPI(
    title="CDI LLM Query Generator API",
    description="Microservice for Retrieval-Augmented Generation (RAG) to create CDI physician queries.",
    version="1.0.0"
)

# Global variables to store the initialized components
qa_chain = None

# --- 2. Pydantic Models for API ---

class QueryRequest(BaseModel):
    """Defines the structure for the incoming request body."""
    clinical_note: str

class QueryResponse(BaseModel):
    """Defines the structure for the outgoing response body."""
    query: str
    source_documents: list[str]

# --- 3. Startup Event: Initialize RAG Components ---

@app.on_event("startup")
async def startup_event():
    """Initializes the LLM and the persistent ChromaDB vector store on application startup."""
    global qa_chain
    start_time = time.time()
    print("--- Starting CDI RAG System Initialization ---")

    try:
        # Initialize the persistent ChromaDB (loads or creates the index)
        vectorstore = setup_chroma_db()
        
        # Initialize the LLM (This is the most time-consuming step)
        llm = get_llm_pipeline()

        # Create the RAG Chain
        qa_chain = create_rag_chain(llm, vectorstore)
        
        end_time = time.time()
        print(f"--- Initialization Complete in {end_time - start_time:.2f} seconds ---")

    except Exception as e:
        print(f"FATAL ERROR during startup: {e}")
        # In a real environment, you might stop the process here.
        qa_chain = None
        raise RuntimeError("RAG components failed to initialize. Check model and database setup.") from e


# --- 4. API Endpoint ---

@app.post("/generate_cdi_query", response_model=QueryResponse)
async def generate_cdi_query(request: QueryRequest):
    """
    Accepts a clinical note and returns a CDI physician query generated by the RAG model.
    """
    if qa_chain is None:
        raise HTTPException(status_code=503, detail="RAG system is not initialized or failed to load.")

    try:
        # Run the RAG Chain
        print(f"Processing note: '{request.clinical_note[:50]}...'")
        result = await qa_chain.acall({"query": request.clinical_note, "system_prompt": SYSTEM_PROMPT})
        
        # Extract and format the results
        generated_query = result['result'].strip()
        source_docs = [doc.metadata.get('source', 'Unknown Source') for doc in result['source_documents']]

        return QueryResponse(
            query=generated_query,
            source_documents=source_docs
        )

    except Exception as e:
        print(f"Error during query generation: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error during LLM generation.")


# --- 5. Health Check Endpoint ---

@app.get("/health")
async def health_check():
    """Simple health check endpoint."""
    status = "healthy" if qa_chain is not None else "unhealthy"
    return {"status": status}
